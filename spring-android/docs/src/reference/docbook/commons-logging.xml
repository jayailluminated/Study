<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="commons-logging" 
	xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>Spring Android Commons Logging Module</title>

  <section id="spring-android-commons-logging-introduction">
    <title>Introduction</title>
    <para>
		Android provides its own logging API for use in Android applications.  
		However, many Java libraries, including Spring, use a logging abstraction such as Commons Logging or Simple Logging Facade for Java (SLF4j).
        The Spring Android Commons Logging Module provides a implementation of the Commons Logging API that bridges onto the Android logging system.
		This allows Java libraries that use Common Logging to run in an Android environment.
    </para>
  </section>

  <section id="spring-android-commons-logging-howtoget">
    <title>How to get</title>
	<para>
		The spring-android-commons-logging module is required to use Spring Android, since the Spring Framework itself requires Commons Logging.
		In general, rely on transitive dependency resolution to include this module in your classpath.
		We do not recommend using the Commons Logging API directly in your own Android applications; rather, use this module simply to adapt existing code onto the Android logging system.
		The definition of the module artifact is provided for reference below:
		<programlisting language="xml"><![CDATA[
<dependency>
    <groupId>org.springframework.android</groupId>
    <artifactId>spring-android-commons-logging</artifactId>
    <version>${org.springframework.android-version}</version>
</dependency>]]>
		</programlisting>
	</para>
  </section>

  <section id="spring-android-commons-logging-mapping">
    <title>Log Level mapping</title>
	<para>
		The Commons Logging API nearly maps directly onto the Android Logging API.  There is one difference.
		The Commons Logging FATAL level maps to the ERROR Android level, since Android has no FATAL level.
	</para>
  </section>

</chapter>