<?xml version="1.0" encoding="UTF-8"?>
<chapter xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="rest-template" 
	xmlns:xlink="http://www.w3.org/1999/xlink">
  <title>Spring Android Rest Template Module</title>

  <section id="spring-android-rest-template-introduction">
    <title>Introduction</title>
    <para>
		Spring's RestTemplate is a robust, popular Java-based REST client.
		The Spring Android Rest Template Module provides a version of RestTemplate that works in an Android environment.
	</para>
  </section>
  
    <section id="spring-android-rest-template-howtoget">
    <title>How to get</title>
	<para>
		Add the spring-android-rest-template artifact to your classpath:
		<programlisting language="xml"><![CDATA[
<dependency>
    <groupId>org.springframework.android</groupId>
    <artifactId>spring-android-rest-template</artifactId>
    <version>${org.springframework.android-version}</version>
</dependency>]]>
		</programlisting>
	</para>
	<para>
		Doing so will transitively include the spring-android-commons-logging module.
	</para>
	<para>
		At the moment, commons-httpclient 3.x is also required for RestTemplate to work on Android without further customization:
	</para>
	<programlisting language="xml"><![CDATA[
<dependency>
    <groupId>commons-httpclient</groupId>
    <artifactId>commons-httpclient</artifactId>
    <version>3.1</version>
</dependency>]]>
	</programlisting>
	<para>
		In a future release, Spring Android will provide support for Http Client 4, which is used on Android by default.
	</para>
  </section>
  
  <section id="spring-android-rest-template-example1">
  <title>Basic usage example</title>
  <para>
		Using Rest Template, it's easy to invoke RESTful APIs.  Below are several usage examples.
  </para>
  <para>
		The following example shows a query to google for the search term "Thanksgiving". 
		<programlisting language="java"><![CDATA[
RestTemplate restTemplate = new RestTemplate();
restTemplate.setRequestFactory(new CommonsClientHttpRequestFactory());
String url = "https://ajax.googleapis.com/ajax/services/search/web?v=1.0&q={query}";
String result = restTemplate.getForObject(url, String.class, "Thanksgiving");]]>
		</programlisting>
	</para>
  </section>
  
  <section id="spring-android-rest-template-example2">
  <title>Usage example: reading JSON data</title>
	<para>
		Alternatively, suppose you have defined a Java object you wish to populate from a RESTful web request that returns JSON content.
	</para>
	<para>
		Define your object based on the JSON data being returned from the RESTful request:
		<programlisting language="java"><![CDATA[
public class Event {

    private Long id;

    private String title;
	
    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    public String getTitle() {
        return title;
    }
	
    public String setTitle(String title) {
        this.title = title;
    }
}]]>
		</programlisting>
	</para>
	<para>
		Make the RestTemplate request: 
		<programlisting language="java"><![CDATA[
RestTemplate restTemplate = new RestTemplate();
restTemplate.setRequestFactory(new CommonsClientHttpRequestFactory());
String url = "https://mypretendservice.com/events";
Event[] events = restTemplate.getForObject(url, Event[].class);]]>
		</programlisting>
	</para>
  </section>
</chapter>