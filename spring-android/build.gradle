/*
 * Copyright 2010 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import org.springframework.build.Version

// -----------------------------------------------------------------------------
// Main gradle build file for Spring Mobile
// @author Chris Beams
// @author Roy Clarkson
// -----------------------------------------------------------------------------

// -----------------------------------------------------------------------------
// Configuration for the root project
// -----------------------------------------------------------------------------
description = 'Spring Android'
abbreviation = 'ANDROID'

apply plugin: 'base'
apply plugin: 'idea'

def buildSrcDir = "$rootDir/buildSrc"
apply from: "$buildSrcDir/wrapper.gradle"
apply from: "$buildSrcDir/maven-root-pom.gradle"

// -----------------------------------------------------------------------------
// Configuration for all projects including this one (the root project)
// @see settings.gradle for list of all projects
// -----------------------------------------------------------------------------
allprojects {
    // group will translate to groupId during pom generation and deployment
    group = 'org.springframework.android'

    // version will be used in maven pom generation as well as determining
    // where artifacts should be deployed, based on release type of snapshot,
    // milestone or release.
    // @see org.springframework.build.Version under buildSrc/ for more info
    // @see gradle.properties for the declaration of this property.
    version = new Version(springAndroidVersion)

    // default set of maven repositories to be used when resolving dependencies
    repositories {
        mavenRepo urls: 'http://maven.springframework.org/release'
        mavenRepo urls: 'http://maven.springframework.org/milestone'
        mavenRepo urls: 'http://maven.springframework.org/snapshot'
        mavenCentral()
    }
}


// -----------------------------------------------------------------------------
// Create collection of subprojects - each will receive their own configuration
// - all subprojects that start with spring-mobile-* are 'java projects'
// - documentation-related projects are not collected here
//
// @see configure(*) sections below
// -----------------------------------------------------------------------------
javaprojects = subprojects.findAll { project ->
    project.path.startsWith(':spring-android-')
}


// -----------------------------------------------------------------------------
// Configuration for all java projects
// -----------------------------------------------------------------------------
configure(javaprojects) {

    apply plugin: 'java'     // tasks for conventional java lifecycle
    apply plugin: 'maven'    // `gradle install` to push jars to local .m2 cache
    apply plugin: 'eclipse'  // `gradle eclipse` to generate .classpath/.project
    apply plugin: 'idea'     // `gradle idea` to generate .ipr/.iml

    // ensure JDK 5 compatibility
    sourceCompatibility=1.5
    targetCompatibility=1.5

    // set up dedicated directories for jars and source jars.
    // this makes it easier when putting together the distribution
    libsBinDir = new File(libsDir, 'bin')
    libsSrcDir = new File(libsDir, 'src')

    // add tasks for creating source jars and generating poms etc
    apply from: "$buildSrcDir/maven-deployment.gradle"

    // add tasks for finding and publishing .xsd files
    apply from: "$buildSrcDir/schema-publication.gradle"

    junitVersion = '4.7'
    log4jVersion = '1.2.16'
    springVersion = '3.0.5.RELEASE'
    androidVersion = '1.5_r3'
    jacksonVersion = '1.5.3'

    // dependencies that are common across all java projects
    dependencies {
        testCompile "junit:junit:$junitVersion"
        testCompile "log4j:log4j:$log4jVersion"
        testCompile "org.springframework:spring-test:$springVersion"
    }

    // enable all compiler warnings (GRADLE-1077)
    [compileJava, compileTestJava]*.options*.compilerArgs = ['-Xlint:all']

    // generate .classpath files without GRADLE_CACHE variable (GRADLE-1079)
    eclipseClasspath.variables = [:]
}


// -----------------------------------------------------------------------------
// Configuration for each individual core java subproject
//
// @see configure(javaprojects) above for general config
// -----------------------------------------------------------------------------
project('spring-android-commons-logging') {
    description = 'Spring Android Commons Logging'
    dependencies {
        compile ("com.google.android:android:$androidVersion") { provided = true }
    }
}

project('spring-android-rest-template') {
    description = 'Spring Android Rest Template'
    
    projLibDir = "$buildDir/exploded-jars/"
    sourceSets.main.resources.srcDir projLibDir
	
	dependencies {
        compile ("com.google.android:android:$androidVersion") { provided = true }
        compile project(":spring-android-commons-logging")
        compile files(projLibDir)
    }
	
    // configuration for extracting required class files
    configurations { dependencyconf }
    dependencies {
        dependencyconf "org.springframework:spring-web:$springVersion"
        dependencyconf "org.springframework:spring-beans:$springVersion"
    }

    compileJava.doFirst {
        // Required classes for RestTemplate support
        classFilter = [
            'org/springframework/beans/factory/DisposableBean.class',
            'org/springframework/core/NestedExceptionUtils.class',
            'org/springframework/core/NestedIOException.class',
            'org/springframework/core/NestedRuntimeException.class',
            'org/springframework/core/io/AbstractResource.class',
            'org/springframework/core/io/ByteArrayResource.class',
            'org/springframework/core/io/ClassPathResource.class',
            'org/springframework/core/io/InputStreamSource.class',
            'org/springframework/core/io/Resource.class',
            'org/springframework/http/HttpEntity.class',
            'org/springframework/http/HttpHeaders.class',
            'org/springframework/http/HttpInputMessage.class',
            'org/springframework/http/HttpMessage.class',
            'org/springframework/http/HttpMethod.class',
            'org/springframework/http/HttpOutputMessage.class',
            'org/springframework/http/HttpStatus.class',
            'org/springframework/http/HttpStatus$Series.class',
            'org/springframework/http/ResponseEntity.class',
            'org/springframework/http/client/AbstractClientHttpRequest.class',
            'org/springframework/http/client/CommonsClientHttpRequest.class',
            'org/springframework/http/client/CommonsClientHttpRequestFactory.class',
            'org/springframework/http/client/CommonsClientHttpResponse.class',
            'org/springframework/http/client/ClientHttpRequest.class',
            'org/springframework/http/client/ClientHttpRequestFactory.class',
            'org/springframework/http/client/ClientHttpResponse.class',
            'org/springframework/http/client/SimpleClientHttpRequest.class',
            'org/springframework/http/client/SimpleClientHttpRequestFactory.class',
            'org/springframework/http/client/SimpleClientHttpResponse.class',
            'org/springframework/http/client/support/HttpAccessor.class',
            'org/springframework/http/converter/AbstractHttpMessageConverter.class',
            'org/springframework/http/converter/ByteArrayHttpMessageConverter.class',
            'org/springframework/http/converter/HttpMessageConversionException.class',
            'org/springframework/http/converter/HttpMessageConverter.class',
            'org/springframework/http/converter/HttpMessageNotReadableException.class',
            'org/springframework/http/converter/HttpMessageNotWritableException.class',
            'org/springframework/http/converter/StringHttpMessageConverter.class',
            'org/springframework/http/converter/json/MappingJacksonHttpMessageConverter.class',
            'org/springframework/util/Assert.class',
            'org/springframework/util/CollectionUtils.class',
            'org/springframework/util/CollectionUtils$EnumerationIterator.class',
            'org/springframework/util/FileCopyUtils.class',
            'org/springframework/util/LinkedCaseInsensitiveMap.class',
            'org/springframework/util/LinkedMultiValueMap.class',
            'org/springframework/util/MultiValueMap.class',
            'org/springframework/util/ObjectUtils.class',
            'org/springframework/util/ResourceUtils.class',
            'org/springframework/util/StringUtils.class',
            'org/springframework/web/client/DefaultResponseErrorHandler.class',
            'org/springframework/web/client/HttpClientErrorException.class',
            'org/springframework/web/client/HttpMessageConverterExtractor.class',
            'org/springframework/web/client/HttpServerErrorException.class',
            'org/springframework/web/client/HttpStatusCodeException.class',
            'org/springframework/web/client/RequestCallback.class',
            'org/springframework/web/client/ResourceAccessException.class',
            'org/springframework/web/client/ResponseErrorHandler.class',
            'org/springframework/web/client/ResponseExtractor.class',
            'org/springframework/web/client/RestClientException.class',
            'org/springframework/web/client/RestOperations.class',
            'org/springframework/web/util/UriTemplate.class',
            'org/springframework/web/util/UriTemplate$Parser.class',
            'org/springframework/web/util/UriUtils.class'
            ]

        // loops through spring framework jars, extracting and copying class files to the lib folder
        FileCollection jars = configurations.dependencyconf
        jars.each { jar ->
            zipTree(jar).visit { classFile ->
                if (classFile.relativePath.toString() in classFilter) {
                    filePath = classFile.relativePath.getPathString().minus(classFile.name)
                    copy {
                        from classFile.file
                        into projLibDir + filePath
                    }
                }
            }
        }
    }
}


// -----------------------------------------------------------------------------
// Configuration for the docs subproject
// -----------------------------------------------------------------------------
project('docs') {
    apply from: "$buildSrcDir/docs.gradle"
}

apply from: "$buildSrcDir/dist.gradle"
apply from: "$buildSrcDir/checks.gradle"